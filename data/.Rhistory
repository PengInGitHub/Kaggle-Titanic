#sum of this two conditions
sum(train$Surname[train$SurviveRate == 0])
#sum of this two conditions
rowSums(train$Surname[train$SurviveRate == 0],)
#sum of this two conditions
rowSums(train$Surname[train$SurviveRate == 0],:)
#sum of this two conditions
rowSums(train$Surname[train$SurviveRate == 0],1)
#sum of this two conditions
rowSums(train[train$SurviveRate == 0],1)
)
#sum of this two conditions
rowSums(train[train$SurviveRate == 0])
#sum of this two conditions
sum(train[train$SurviveRate == 0])
#sum of this two conditions
nrow(train[train$SurviveRate == 0])
#sum of this two conditions
nrow(train)
#sum of this two conditions
nrow(train[train$SurviveRate == 0])
#sum of this two conditions
nrow(train[train$SurviveRate == 0,])
#sum of this two conditions
#mistake made here, nrow(train[train$SurviveRate == 0])
nrow(train[train$SurviveRate == 0 | train$SurviveRate == 1,])
nrow(train[train$Title != 'noGroup',])
nrow(train[train$SurviveRate != 'noGroup',])
nrow(train[train$Surname != 'noGroup',])
#test new feature
#cross validation
library(ggplot2)
train$Survived
train$Surname
ave(train$Survived, train$Surname)
table(train$SurviveRate[train$Title != 'noGroup'])
train$SurnameSurvival
train$SurnameSurvival
head(train$SurnameSurvival)
head(train$SurviveRate)
train$AdjustedSurvival <- (train$SurnameSurvival * train$SurnameFreq - train$Survived) / (train$SurnameFreq-1)
table(train$AdjustedSurvival)
train$SurnameSurvival * train$SurnameFreq - train$Survived
train$AdjustedSurvival <- (train$SurnameSurvival * train$SurnameFreq - train$Survived) / (train$SurnameFreq-1)
train$AdjustedSurvival <- (train$SurnameSurvival * train$SurnameFreq - train$Survived) / (train$SurnameFreq-1)
table(train$AdjustedSurvival)
train$AdjustedSurvival <- (train$SurviveRate * train$SurnameFreq - train$Survived) / (train$SurnameFreq-1)
table(train$AdjustedSurvival)
train$SurviveRate * train$SurnameFreq
train$SurnameFreq
train$SurviveRate * train$SurnameFreq
train$AdjustedSurvival <- (train$SurviveRate * train$SurnameFreq - train$Survived) / (train$SurnameFreq-1)
table(train$AdjustedSurvival)
all_survived = train$Surname[train$SurviveRate==1]
all_survived
all_survived = train$Surname[train$AdjustedSurvival==1]
all_survived
train$Predict = 0
train$Predict[train$Title == 'woman'] = 1
train$Predict[train$Title == 'boy' & train$AdjustedSurvival==1] = 1
train$Predict[train$Title == 'woman' & train$AdjustedSurvival==0] = 0
table(train$Predict)
table(train$Predict, train$Title)
ggplot(train[train$Title=='woman',]) +
geom_jitter(aes(x=Pclass,y=predict,color=factor(Survived))) +
labs(title="36 female predictions change from gender model on training set") +
labs(x="Pclass",y="New Predictor") +
geom_rect(alpha=0,color="black",aes(xmin=2.5,xmax=3.5,ymin=-0.45,ymax=0.45))
table(train$Survived[train$Title=='woman' & train$predict==0])
ggplot(train[train$Title=='woman',]) +
geom_jitter(aes(x=Pclass,y=predict,color=factor(Survived))) +
labs(title="36 female predictions change from gender model on training set") +
labs(x="Pclass",y="New Predictor") +
geom_rect(alpha=0,color="black",aes(xmin=2.5,xmax=3.5,ymin=-0.45,ymax=0.45))
table(train$Survived[train$Title=='woman' & train$Predict==0])
ggplot(train[train$Title=='woman',])
ggplot(train[train$Title=='woman',]) +
geom_jitter(aes(x=Pclass,y=predict,color=factor(Survived)))
ggplot(train[train$Title=='woman',]) +
geom_jitter(aes(x=Pclass,y=Predict,color=factor(Survived)))
ggplot(train[train$Title=='woman',]) +
geom_jitter(aes(x=Pclass,y=Predict,color=factor(Survived))) +
labs(title="36 female predictions change from gender model on training set") +
labs(x="Pclass",y="New Predictor") +
geom_rect(alpha=0,color="black",aes(xmin=2.5,xmax=3.5,ymin=-0.45,ymax=0.45))
table(train$Survived[train$Title=='woman' & train$Predict==0])
ggplot(train[train$Title!='woman',]) +
geom_jitter(aes(x=Title,y=Predict,color=factor(Survived))) +
labs(title="16 male predictions change from gender model on training set") +
labs(x="Title",y="New Predictor") +
geom_rect(alpha=0,color="black",aes(xmin=0.5,xmax=1.5,ymin=0.55,ymax=1.45))
table(train$Survived[train$Title!='woman' & train$Predict==1])
#in overall the new predictor made 36+16=52 corrections from the gender model
train$Name
table(train$SurviveRate[train$Title != 'noGroup'])
unique(all_perished[order(all_perished)])
trials = 25; sum = 0
for (j in 1:trials){
x = sample(1:890); s = 0
for (i in 0:9){
# Engineer "woman-child-groups" from training subset
train$Surname <- substring(train$Name,0,regexpr(",",train$Name)-1)
train$Surname[train$Title=='man'] <- 'noGroup'
train$SurnameFreq <- ave(1:891,train$Surname,FUN=length)
train$Surname[train$SurnameFreq<=1] <- 'noGroup'
train$SurnameSurvival <- NA
# calculate training subset's surname survival rate
train$SurnameSurvival[-x[1:89+i*89]] <- ave(train$Survived[-x[1:89+i*89]],train$Surname[-x[1:89+i*89]])
# calculate testing subset's surname survival rate from training set's rate
for (k in x[1:89+i*89])
train$SurnameSurvival[k] <- train$SurnameSurvival[which(!is.na(train$SurnameSurvival) & train$Surname==train$Surname[k])[1]]
# apply gender model plus new predictor
train$Predict <- 0
train$Predict[train$Title=='woman'] <- 1
train$Predict[train$Title=='boy' & train$SurnameSurvival==1] <- 1
train$Predict[train$Title=='woman' & train$SurnameSurvival==0] <- 0
c = sum(abs(train$Predict[x[1:89+i*89]] - train$Survived[x[1:89+i*89]]))
s = s + c
}
cat( sprintf("Trial %d has 10-fold CV accuracy = %f\n",j,1-s/890))
sum = sum + 1-s/890
}
cat(sprintf("Average 10-fold CV accuracy from %d trials = %f\n",trials,sum/trials))
?Control
print u1
u1 = rnorm(30)
print u1
u1 = rnorm(30)
print (u1)
u1 = rnorm(30)
print (u1)
usq = 0
for (i in 1:10){
usq[i] = u1[i]*u1[i]
print(usq[i])
}
print(usq)
#R loop exercise
u1 = rnorm(30)
print (u1)
#usq = 0
#language comparsion
#condition in Parentheses: java, R; not in: Go, py
#block in curly brackets: java, R, Go; not in: py
for (i in 1:10){
usq[i] = u1[i]*u1[i]
print(usq[i])
}
print(usq)
for i in range(1,10){
print(i)
}
for i in 1:10{
print(i)
}
for (i in 1:10){
print(i)
}
for (i in 1:10){
for (j in 1:10){
ma[i][j] = i* j
}
}
print(ma)
ma = matrix(rnow=30, rcol=30)
for (i in 1:10){
for (j in 1:10){
ma[i][j] = i* j
}
}
print(ma)
#Nested loop
ma = matrix(nrow=30, ncol=30)
for (i in 1:10){
for (j in 1:10){
ma[i][j] = i* j
}
}
print(ma)
ma = matrix(nrow=30, ncol=30)
for (i in 1:dim(ma)[1]){
for (j in 1:dim(ma)[2]){
ma[i][j] = i* j
}
}
print(ma)
#Nested loop
ma <- matrix(nrow=30, ncol=30)
for (i in 1:dim(ma)[1]){
for (j in 1:dim(ma)[2]){
ma[i][j] = i* j
}
}
print(ma)
ma <- matrix(nrow=30, ncol=30)
for (i in 1:dim(ma)[1]){
for (j in 1:dim(ma)[2]){
ma[i,j] = i* j
}
}
print(ma)
print(ma[1:5,1:5])
ma = matrix(nrow=30, ncol=30)
#row
for (i in 1:dim(matrix)[1]){
#col
for (j in 1:dim(matrix)[2]){
ma[i,j] = i*j
}
}
print(ma[1:6, 1:6])
for (i in 1:dim(matrix)[1]){
#col
for (j in 1:dim(matrix)[2]){
ma[i,j] = i*j
}
}
print(ma[1:6, 1:6])
ma = matrix(nrow=30, ncol=30)
#row
for (i in 1:dim(matrix)[1]){
#col
for (j in 1:dim(matrix)[2]){
ma[i,j] = i*j
}
}
print(ma[1:6, 1:6])
ma = matrix(nrow=30, ncol=30)
print(ma[1:6, 1:6])
#Nested loop
ma = matrix(nrow=30, ncol=30)
#row
for (i in 1:dim(matrix)[1]){
#col
for (j in 1:dim(matrix)[2]){
ma[i,j] = i*j
}
}
ma[1:6, 1:6]
ma = matrix(nrow=30, ncol=30)
#row
for (i in 1:dim(matrix)[1]){
print (i)
#col
for (j in 1:dim(matrix)[2]){
print(j)
ma[i,j] = i*j
}
}
ma[1:6, 1:6]
ma = matrix(nrow=30, ncol=30)
#row
for (i in 1:dim(ma)[1]){
print (i)
#col
for (j in 1:dim(ma)[2]){
print(j)
ma[i,j] = i*j
}
}
ma[1:6, 1:6]
a = array(1:20, dim=c(20,20,20))
#x
for (i in 1:dim(a)[1]){
#y
for (j in 1:dim(a)[2]){
#z
for (k in 1:dim(a)[3]){
a[i,j,k] = i*j*k
}
}
}
print(a)
print(a[1:5,1:5,1:5])
my_int = 2
n = as.integer(my_int)
if (n > 10){
print(a[1:10,1:10,1:10])
}else{
print(a[1:n,1:n,1:n])
}
readinteger <- function(){
n <- readline(prompt="Please, enter your ANSWER: ")
}
response <- as.integer(readinteger())
while (response!=42) {
print("Sorry, the answer to whatever the question MUST be 42");
response <- as.integer(readinteger());
}
readinteger <- function(){
n <- readline(prompt="Please, enter your ANSWER: ")
}
response <- as.integer(readinteger())
while (response!=42) {
print("Sorry, the answer to whatever the question MUST be 42");
response <- as.integer(readinteger());
}
readinteger <- function(){
n <- readline(prompt="Please, enter your ANSWER: ")
}
response <- as.integer(readinteger())
while (response!=42) {
print("Sorry, the answer to whatever the question MUST be 42");
response <- as.integer(readinteger());
}
readInteger <- function(){
n <- readline(prompt = "please input the answer")
}
response <- as.integer(readInteger)
readInteger <- function(){
n <- readline(prompt = "please input the answer: ")
}
#made mistake here, readInteger(), forgot the ()
response <- as.integer(readInteger())
while (response!=3){
print("wrong answer, the input must be 3")
response <- as.integer(readInteger)
}
while (response!=3){
print("wrong answer, the input must be 3")
response <- as.integer(readInteger())
}
readInteger <- function(){
n <- readline(prompt = "please input the answer: ")
}
repeat{
response <- as.integer(readInteger())
if (response == 42){
print('Good job!')
break
}else{
print('the answer has to be 42')
}
}
m = 10
n = 10
my_matrix = matrix(0, m, n)
for (x in 1:dim(my_matrix)[1]){
for (y in 1:dim(my_matrix)[2]){
if(x==y){
break
}else{
my_matrix[x,y] = x*y
}
}
}
print(my_matrix)
for (k in 1:20){
if (!k%%2){
next
}
print(k)
}
for (k in 1:20){
if (k%%2){
next
}
print(k)
}
for (k in 1:20){
if (k%%2){#if reminder is zero
next
}
print(k)#only ode numbers
}
for (k in 1:20){
if (k%%2){#if reminder is not zero
next
}
print(k)# k%%2 is zero
}
for (k in 1:20){
if (!k%%2){#if reminder is not zero
next
}
print(k)# k%%2 is zero
}
for (k in 1:20){
if (k%%2){#if reminder is not zero
next#jump to the condition evaluation part (k in 1:20)
}
print(k)# would be ignored if k%%2 is not zero
}
a = c(4, 6, 2, 3)
b = c(1, 5, 6, 7)
#in a loop
for (i in 1:length(a)){
c[i] = a[i]+b[i]
}
c
a = matrix(1:6, nrow=3, ncol=2)
b = cbind(c(1,2,5), c(2,5,3))
c = a + b
c
m = 10
n = 10
my_matrix = replicate(m,norm(n))
my_matrix
m = 10
n = 10
my_matrix = replicate(m,rnorm(n))
my_matrix
rnorm(n)
my_matrix = replicate(5,rnorm(n))
my_matrix
m = 10
n = 10
#rnorm(n,mean=0,std=0): n numbers that have mean=0 std=0
#replicate(A,B): replicate B for A times. B:nrow, A:ncol
my_matrix = replicate(m,rnorm(n))
my_matrix
my_matrix = replicate(m,rnorm(n))
my_df = data.frame((my_matrix))
describe(my_df)
#
my_df.describe()
head(my_df)
for (x in 1:m){
for (y in 1:n){
my_df[x, y] = my_df[x, y] + 10*sin(0.75*pi)
}
}
my_df
#use verctorization
my_df = data.frame(my_matrix)
my_df = my_df + sin(0.75*pi)*10
my_df
system.time(for (x in 1:m){
for (y in 1:n){
my_df[x, y] = my_df[x, y] + 10*sin(0.75*pi)
}
})
#use verctorization
my_df = data.frame(my_matrix)
system.time(my_df = my_df + sin(0.75*pi)*10)
system.time(for (x in 1:m){
for (y in 1:n){
my_df[x, y] = my_df[x, y] + 10*sin(0.75*pi)
}
})
#use verctorization
my_df = data.frame(my_matrix)
system.time(my_df <- my_df + sin(0.75*pi)*10)
mymat <- matrix(rep(seq(5),4),ncol=5)
mymat
##### apply #####
rep(seq(5),4)
apply(mymat, 1, sum)#to row
apply(mymat, 2, mean)#each col
#UDF
apply(mymat, 1, function(x, y) sum(x)+y, y=4.5)
apply(mymat, 1, function(x) summary(x))
apply(mymat, 2, function(x) summary(x))
#use functions in R
#https://www.datacamp.com/community/tutorials/functions-in-r-a-tutorial
#the first func
myFunc <- function(x){
x*x
}
myFunc(5)
rm(list=ls())
myFunc
myFunc
myFunc <- function(x){
x*x
}
myFunc(5)
myFunc
if(exists("myFirstFun", mode = "function"))
source("MyUtils.R")
myNewFunc <- function(x, y=2){
x^y
}
myNewFunc(2,3)
myNewFunc(2)
myNewFunc(2,3)
myNewFunc(3,3)
myNewFunc(2)
myNewFunc(2,3)
myNewFunc(3,8)
myNewFunc(2)
f <- function(x, y){
if(missing(y)){
y <- seq(1,5,1)
}
return(x^y)
}
f(2,3)
f(2)
#check input is within a list
ff <- function(x,y){
if(missing(x)){x=2}#py: if !x {}
if(missing(y)){y=2}
if(!y %in% seq(2,8,2)){print("value must be within 2-8")}
return (x^y)
}
ff(2,2)
ff()
ff(3,1)
ff <- function(x,y){
if(missing(x)){x=2}#py: if !x {}
if(missing(y)){y=2}
if(!y %in% seq(2,8,2)){print("value must be within 2-8")}
else return (x^y)
}
ff(2,2)
ff()
ff(3,1)
f <- function(x){return (x*10)}
f(10)
function(x){return (x*10)}(10)
(function(x){return (x*10)})(10)
